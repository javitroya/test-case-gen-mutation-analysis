module MergeModels;
create OUT : JointModel from IN1 : Grafcet, IN2 : PetriNet;

--helper def : root : JointModel!JointMM = OclAny;
--
--entrypoint rule CreateContainer(){
--	to
--		jm : JointModel!JointMM(
--			--The source and target models are suppose to have only one root element
--			sourceRoot <- BibTexModel!BibTeXFile.allInstancesFrom('IN1') -> first(),
--			targetRoot <- DocBookModel!DocBook.allInstancesFrom('IN2')->first()
--		)
--	do{
--		thisModule.root <- jm;
--	}
--}

-------------For each class that is not abstract in the source model (from inner to outer)-------------------
--A filter is necessary when there are non-abstract classes having children, see BibTex2DocBook example

rule Transition2SrcTransition{
	from s : Grafcet!Transition
	to   t : JointModel!SrcTransition(
			condition <- s.condition,
			incomingConnections <- s.incomingConnections,
			outgoingConnections <- s.outgoingConnections,
			name <- s.name,
			grafcet <- s.grafcet,
			location <- s.location
		)
}

rule Step2SrcStep{
	from s : Grafcet!Step
	to   t : JointModel!SrcStep(
			isInitial <- s.isInitial,
			isActive <- s.isActive,
			action <- s.action,
			incomingConnections <- s.incomingConnections,
			outgoingConnections <- s.outgoingConnections,
			name <- s.name,
			grafcet <- s.grafcet,
			location <- s.location
		)
}

rule StepToTransition2SrcStepToTransition{
	from s : Grafcet!StepToTransition
	to   t : JointModel!SrcStepToTransition(
			"from" <- s."from",
			"to" <- s."to",
			name <- s.name,
			grafcet <- s.grafcet,
			location <- s.location
		)
}

rule TransitionToStep2SrcTransitionToStep{
	from s : Grafcet!TransitionToStep
	to   t : JointModel!SrcTransitionToStep(
			"from" <- s."from",
			"to" <- s."to",
			name <- s.name,
			grafcet <- s.grafcet,
			location <- s.location
		)
}

rule Grafcet2SrcGrafcet{
	from s : Grafcet!Grafcet
	to   t : JointModel!SrcGrafcet(
			elements <- s.elements,
			connections <- s.connections,
			name <- s.name,
			location <- s.location
		)
}

-----------------For each class that is not abstract in the target model-------------------

rule TransitionToPlace2TrgTransitionToPlace{
	from s : PetriNet!TransitionToPlace
	to   t : JointModel!TrgTransitionToPlace(
			weight <- s.weight,
			location <- s.location,
			name <- s.name,
			"from" <- s."from",
			"to" <- s."to",
			net <- s.net
		)
}

rule PlaceToTransition2TrgPlaceToTransition{
	from s : PetriNet!PlaceToTransition
	to   t : JointModel!TrgPlaceToTransition(
			weight <- s.weight,
			location <- s.location,
			name <- s.name,
			"from" <- s."from",
			"to" <- s."to",
			net <- s.net
		)
}

rule Place2Place{
	from s : PetriNet!Place
	to   t : JointModel!TrgPlace(
			location <- s.location,
			name <- s.name,
			incomingArc <- s.incomingArc,
			outgoingArc <- s.outgoingArc,
			net <- s.net
		)
}

rule Transition2Transition{
	from s : PetriNet!Transition
	to   t : JointModel!TrgTransition(
			location <- s.location,
			name <- s.name,
			incomingArc <- s.incomingArc,
			outgoingArc <- s.outgoingArc,
			net <- s.net
		)
}

rule PetriNet2PetriNet{
	from s : PetriNet!PetriNet
	to   t : JointModel!TrgPetriNet(
			location <- s.location,
			name <- s.name,
			arcs <- s.arcs,
			elements <- s.elements
	)
}