module HSM2FSM_Mutant21;
create OUT : FSM, TM : TMM from IN : HSM;

helper def : trace : TMM!Trace = OclUndefined;

entrypoint rule createTrace()
{
	to
		tr : TMM!Trace( )
	
	do {
		thisModule.trace <- tr;
	}	
}

rule SM2SM {
from sm1 : HSM!StateMachine
to  sm2 : FSM!StateMachine ( 
		name <- sm1.name
	),
	-- trace information
	tl : TMM!TraceLink(
		ruleName <- 'SM2SM',
		targetElements <- Sequence{sm2}
	)
	do {
		-- trace information
		tl.sourceElements <- Sequence{sm1};
		thisModule.trace.traceLinks <- tl;
	}
}

rule RS2RS {
from rs1 : HSM!RegularState
to   rs2 : FSM!RegularState ( 
		name <- rs1.name,
		stateMachine <- rs1.stateMachine 
	 ),
	-- trace information
	tl : TMM!TraceLink(
		ruleName <- 'RS2RS',
		targetElements <- Sequence{rs2}
	)
	do {
		-- trace information
		tl.sourceElements <- Sequence{rs1};
		thisModule.trace.traceLinks <- tl;
	} 
}

--Initial states of composite states become regular states in the flattened SM
 rule IS2IS {
from is1 : HSM!InitialState (
		is1.compositeStates.oclIsUndefined())
to   is2 : FSM!InitialState ( 
	 	stateMachine <- is1.stateMachine, 
	  	name <- is1.name 
	 ),
	-- trace information
	 tl : TMM!TraceLink(
		ruleName <- 'IS2IS',
		targetElements <- Sequence{is2}
	 )
	 do {
		-- trace information
		tl.sourceElements <- Sequence{is1};
		thisModule.trace.traceLinks <- tl;
	 } 
}

--Initial states of composite states become regular states in the flattened SM
rule IS2RS {
from is1 : HSM!InitialState (
			not is1.compositeStates.oclIsUndefined())
to  is2 : FSM!RegularState ( 
		stateMachine <- is1.stateMachine, 
		name <- is1.name 
	),
	-- trace information
	 tl : TMM!TraceLink(
		ruleName <- 'IS2RS',
		targetElements <- Sequence{is2}
	 )
	 do {
		-- trace information
		tl.sourceElements <- Sequence{is1};
		thisModule.trace.traceLinks <- tl;
	 } 
}

--Transitions between two non−composite states are mapped one−to−one
rule T2TA {
from t1 : HSM!Transition ( 
		not t1.source.oclIsTypeOf(HSM!CompositeState) and
			not t1.target.oclIsTypeOf(HSM!CompositeState))
to  t2 : FSM!Transition ( 
		label <- t1.label, 
		stateMachine <- t1.stateMachine,
		source <- t1.source, 
		target <- t1.target 
	),
	t3 : FSM!Transition (               -- out-pattern element addition
		label <- t1.label
	),
	
	-- trace information
	 tr : TMM!TraceLink(
		ruleName <- 'T2TA',
		targetElements <- Sequence{t2,t3}
	 )
	 do {
		-- trace information
		tr.sourceElements <- Sequence{t1};
		thisModule.trace.traceLinks <- tr;
	 } 
}

--This rule resolves a transition originating from a composite state
rule T2TB {
from t1 : HSM!Transition,
	 src : HSM!CompositeState,
	 trg : HSM!AbstractState,
	 c : HSM!RegularState (  -- c : HSM!AbstractState ( 
	 	t1.source = src and t1.target = trg and c.compositeStates = src and
			not trg.oclIsTypeOf(HSM!CompositeState))
to  t2 : FSM!Transition ( 
		label <- t1.label, 
		stateMachine <- t1.stateMachine,
		source <- c, 
		target <- trg 
	),
	t3 : FSM!Transition (          -- out-pattern element addition
		label <- t1.label
	),
	-- trace information
	 tr : TMM!TraceLink(
		ruleName <- 'T2TB',
		targetElements <- Sequence{t2,t3}
	 )
	 do {
		-- trace information
		tr.sourceElements <- Sequence{t1,src,trg,c};
		thisModule.trace.traceLinks <- tr;
	 } 
}

--This rule resolves a transition ending in a composite state
rule T2TC {
from t1 : HSM!Transition,
	 src : HSM!AbstractState,
	 trg : HSM!CompositeState,
	 c : HSM!InitialState ( 
	 	t1.source = src and t1.target = trg and c.compositeStates = trg and
			not src.oclIsTypeOf(HSM!CompositeState) )
to t2 : FSM!Transition ( 
		label <- t1.label, 
		stateMachine <- t1.stateMachine,
		source <- src, 
		target <- c 
	),
	-- trace information
	 tl : TMM!TraceLink(
		ruleName <- 'T2TC',
		targetElements <- Sequence{t2}
	 )
	 do {
		-- trace information
		tl.sourceElements <- Sequence{t1,src,trg,c};
		thisModule.trace.traceLinks <- tl;
	 }  
}