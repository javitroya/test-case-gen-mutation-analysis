module MergeModels;
create OUT : JointModel from IN1 : PetriNet, IN2 : PNML;

--helper def : root : JointModel!JointMM = OclAny;
--
--entrypoint rule CreateContainer(){
--	to
--		jm : JointModel!JointMM(
--			--The source and target models are suppose to have only one root element
--			sourceRoot <- BibTexModel!BibTeXFile.allInstancesFrom('IN1') -> first(),
--			targetRoot <- DocBookModel!DocBook.allInstancesFrom('IN2')->first()
--		)
--	do{
--		thisModule.root <- jm;
--	}
--}

-------------For each class that is not abstract in the source model (from inner to outer)-------------------
--A filter is necessary when there are non-abstract classes having children, see BibTex2DocBook example

rule TransitionToPlace2SrcTransitionToPlace{
	from s : PetriNet!TransitionToPlace
	to   t : JointModel!SrcTransitionToPlace(
			weight <- s.weight,
			location <- s.location,
			name <- s.name,
			"from" <- s."from",
			"to" <- s."to",
			net <- s.net
		)
}

rule PlaceToTransition2SrcPlaceToTransition{
	from s : PetriNet!PlaceToTransition
	to   t : JointModel!SrcPlaceToTransition(
			weight <- s.weight,
			location <- s.location,
			name <- s.name,
			"from" <- s."from",
			"to" <- s."to",
			net <- s.net
		)
}

rule Place2Place{
	from s : PetriNet!Place
	to   t : JointModel!SrcPlace(
			location <- s.location,
			name <- s.name,
			incomingArc <- s.incomingArc,
			outgoingArc <- s.outgoingArc,
			net <- s.net
		)
}

rule Transition2Transition{
	from s : PetriNet!Transition
	to   t : JointModel!SrcTransition(
			location <- s.location,
			name <- s.name,
			incomingArc <- s.incomingArc,
			outgoingArc <- s.outgoingArc,
			net <- s.net
		)
}

rule PetriNet2PetriNet{
	from s : PetriNet!PetriNet
	to   t : JointModel!SrcPetriNet(
			location <- s.location,
			name <- s.name,
			arcs <- s.arcs,
			elements <- s.elements
	)
}

-----------------For each class that is not abstract in the target model-------------------

rule Label2rgLabel{
	from s : PNML!Label
	to   t : JointModel!TrgLabel(
			location <- s.location
	)
}

rule Name2TrgName{
	from s : PNML!Name
	to   t : JointModel!TrgName(
			location <- s.location,
			net <- s.net,
			labels <- s.labels
	)
}

rule Place2TrgPlace{
	from s : PNML!Place
	to   t : JointModel!TrgPlace(
			location <- s.location,
			id <- s.id,
			name <- s.name
	)
}

rule Transition2TrgTransition{
	from s : PNML!Transition
	to   t : JointModel!TrgTransition(
			location <- s.location,
			id <- s.id,
			name <- s.name
	)
}

rule Arc2TrgArc{
	from s : PNML!Arc
	to   t : JointModel!TrgArc(
			location <- s.location,
			id <- s.id,
			source <- s.source,
			target <- s.target,
			name <- s.name
	)
}

rule URI2TrgURI{
	from s : PNML!URI
	to   t : JointModel!TrgURI(
			location <- s.location,
			value <- s.value
	)
}

rule NetElement2TrgNetElement{
	from s : PNML!NetElement
	to   t : JointModel!TrgNetElement(
			location <- s.location,
			id <- s.id,
			name <- s.name,
			conents <- s.contents,
			type <- s.type,
			document <- s.document
	)
}

rule PNMLDocument2TrgPNMLDocument{
	from s : PNML!PNMLDocument
	to   t : JointModel!TrgPNMLDocument(
			location <- s.location,
			xmlns <- s.xmlns,
			nets <- s.nets
	)
}